url =         jdbc:postgresql://localhost:5432/tracker
user =        postgres
password =    password

createRole    = CREATE TABLE IF NOT EXISTS role( \
                  id SERIAL PRIMARY KEY, \
                  role VARCHAR(50) UNIQUE \
                )

createType    = CREATE TABLE IF NOT EXISTS music_type( \
                  id SERIAL PRIMARY KEY, \
                  music_type VARCHAR(100) UNIQUE\
                )

createUsers   = CREATE TABLE IF NOT EXISTS m_users( \
                  id SERIAL PRIMARY KEY, \
                  role_id INTEGER REFERENCES role(id), \
                  password VARCHAR(100), \
                  login VARCHAR(30), \
                  name VARCHAR(30) \
                )
insertRootUser = INSERT INTO m_users (id, role_id, password, login, name) \
                   VALUES (0, 1, 'root', 'root', 'root') ON CONFLICT DO NOTHING
insertRootAddress = INSERT INTO address (id, address) VALUES(0, 'root') \
                       ON CONFLICT DO NOTHING
insertRootMusicType = INSERT INTO music_type_users(music_type_id, user_id) \
                        VALUES (1, 0) ON CONFLICT DO NOTHING
createAddress = CREATE TABLE IF NOT EXISTS address( \
                  id INTEGER PRIMARY KEY REFERENCES m_users(id), \
                  address VARCHAR(100) \
                )
createTypeUsers = CREATE TABLE IF NOT EXISTS music_type_users( \
                    music_type_id INTEGER REFERENCES music_type(id), \
                    user_id INTEGER REFERENCES m_users(id), \
                    PRIMARY KEY(music_type_id, user_id) \
                  )

insertRoles     = INSERT INTO role (role) \
                    VALUES ('user'), ('moderator'), ('admin') \
                    ON CONFLICT DO NOTHING

insertTypes     = INSERT INTO music_type (music_type) \
                    VALUES ('rap'), ('rock'), ('jaz') \
                    ON CONFLICT DO NOTHING

addAddress      = INSERT INTO address (id, address) VALUES (?, ?)
findAllAddress  = SELECT address FROM address
findAddressById = SELECT address FROM address WHERE id = ?
deleteAddress   = DELETE FROM address WHERE id = ?
updateAddress   = UPDATE address SET address = ? WHERE id = ?
addMusicType    = INSERT INTO music_type (music_type) VALUES (?) RETURNING id
findAllTypes    = SELECT id, music_type FROM music_type
findTypeById    = SELECT id, music_type FROM music_type WHERE id = ?
findTypeId      = SELECT id FROM music_type WHERE music_type = ?
deleteType      = DELETE FROM music_type WHERE id = ?
updateType      = UPDATE music_type SET music_type = ? WHERE id = ?
addRole         = INSERT INTO role (role) VALUES (?) RETURNING id
findAllRoles    = SELECT id, role FROM role
findRoleById    = SELECT id, role FROM role WHERE id = ?
deleteRole      = DELETE FROM role WHERE id = ?
updateRole      = UPDATE role SET role = ? WHERE id = ?
findRoleId      = SELECT id FROM role WHERE role = ?
insertUser      = INSERT INTO m_users (role_id, password, login, name) \
                    VALUES (?, ?, ?, ?) RETURNING id
addUserType     = INSERT INTO music_type_users (music_type_id, user_id) \
                    VALUES (?, ?)
findUsers       = SELECT id, name, role_id, password, login FROM m_users
findTypesByUserId = SELECT music_type_id FROM music_type_users WHERE user_id = ?
findUserById    = SELECT id, name, role_id, password, login FROM m_users WHERE id = ?
findAddressId   = SELECT id FROM address WHERE address = ?
findUsersByRole = SELECT id, name, role_id, password, login FROM m_users WHERE role_id = ?
findUsersByType = SELECT id, name, role_id, password, login FROM m_users WHERE id IN ( \
                     SELECT user_id FROM music_type_users WHERE music_type_id = ?)
deleteUserType  = DELETE FROM music_type_users WHERE user_id = ?
deleteUser      = DELETE FROM m_users WHERE id = ?
updateUser      = UPDATE m_users SET role_id = ?, password = ?, login = ?, name = ? WHERE id = ?
findUserByLogin = SELECT id, name, role_id, password, login FROM m_users WHERE login = ?